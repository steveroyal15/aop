
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLOR COMMA DRAW EQUALS FLOAT IDENTIFIER INT LPAREN POINTS PRINT RPAREN SET SHAPE\n    run : var_assign\n        | get_var\n        | print\n        | draw\n    \nvar_assign : SET IDENTIFIER EQUALS INT\n           | SET IDENTIFIER EQUALS FLOAT\n           | SET IDENTIFIER EQUALS SHAPE\n           | SET IDENTIFIER EQUALS COLOR\n           | SET IDENTIFIER EQUALS POINTS\n           | SET IDENTIFIER EQUALS IDENTIFIER\n    \n    get_var : IDENTIFIER\n    \n    print : PRINT LPAREN expression RPAREN\n    \n    draw : drawRec\n         | drawCircle\n    \n    drawCircle : DRAW SHAPE expression COMMA expression COMMA expression\n    \n    drawRec : DRAW SHAPE expression COMMA expression COMMA expression COMMA expression COMMA expression\n    \n    expression : get_var\n               | INT\n               | FLOAT\n               | POINTS\n               | COLOR\n    '
    
_lr_action_items = {'SET':([0,],[6,]),'IDENTIFIER':([0,6,13,14,15,30,32,34,36,],[7,12,7,7,23,7,7,7,7,]),'PRINT':([0,],[8,]),'DRAW':([0,],[11,]),'$end':([1,2,3,4,5,7,9,10,17,18,19,20,21,23,24,25,26,27,28,29,33,37,],[0,-1,-2,-3,-4,-11,-13,-14,-17,-18,-19,-20,-21,-10,-5,-6,-7,-8,-9,-12,-15,-16,]),'RPAREN':([7,16,17,18,19,20,21,],[-11,29,-17,-18,-19,-20,-21,]),'COMMA':([7,17,18,19,20,21,22,31,33,35,],[-11,-17,-18,-19,-20,-21,30,32,34,36,]),'LPAREN':([8,],[13,]),'SHAPE':([11,15,],[14,26,]),'EQUALS':([12,],[15,]),'INT':([13,14,15,30,32,34,36,],[18,18,24,18,18,18,18,]),'FLOAT':([13,14,15,30,32,34,36,],[19,19,25,19,19,19,19,]),'POINTS':([13,14,15,30,32,34,36,],[20,20,28,20,20,20,20,]),'COLOR':([13,14,15,30,32,34,36,],[21,21,27,21,21,21,21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'run':([0,],[1,]),'var_assign':([0,],[2,]),'get_var':([0,13,14,30,32,34,36,],[3,17,17,17,17,17,17,]),'print':([0,],[4,]),'draw':([0,],[5,]),'drawRec':([0,],[9,]),'drawCircle':([0,],[10,]),'expression':([13,14,30,32,34,36,],[16,22,31,33,35,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> run","S'",1,None,None,None),
  ('run -> var_assign','run',1,'p_run','lexer.py',96),
  ('run -> get_var','run',1,'p_run','lexer.py',97),
  ('run -> print','run',1,'p_run','lexer.py',98),
  ('run -> draw','run',1,'p_run','lexer.py',99),
  ('var_assign -> SET IDENTIFIER EQUALS INT','var_assign',4,'p_var_assign','lexer.py',106),
  ('var_assign -> SET IDENTIFIER EQUALS FLOAT','var_assign',4,'p_var_assign','lexer.py',107),
  ('var_assign -> SET IDENTIFIER EQUALS SHAPE','var_assign',4,'p_var_assign','lexer.py',108),
  ('var_assign -> SET IDENTIFIER EQUALS COLOR','var_assign',4,'p_var_assign','lexer.py',109),
  ('var_assign -> SET IDENTIFIER EQUALS POINTS','var_assign',4,'p_var_assign','lexer.py',110),
  ('var_assign -> SET IDENTIFIER EQUALS IDENTIFIER','var_assign',4,'p_var_assign','lexer.py',111),
  ('get_var -> IDENTIFIER','get_var',1,'p_get_var','lexer.py',118),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','lexer.py',125),
  ('draw -> drawRec','draw',1,'p_draw_shape','lexer.py',132),
  ('draw -> drawCircle','draw',1,'p_draw_shape','lexer.py',133),
  ('drawCircle -> DRAW SHAPE expression COMMA expression COMMA expression','drawCircle',7,'p_drawCircle','lexer.py',140),
  ('drawRec -> DRAW SHAPE expression COMMA expression COMMA expression COMMA expression COMMA expression','drawRec',11,'p_drawRec','lexer.py',147),
  ('expression -> get_var','expression',1,'p_experession','lexer.py',154),
  ('expression -> INT','expression',1,'p_experession','lexer.py',155),
  ('expression -> FLOAT','expression',1,'p_experession','lexer.py',156),
  ('expression -> POINTS','expression',1,'p_experession','lexer.py',157),
  ('expression -> COLOR','expression',1,'p_experession','lexer.py',158),
]
